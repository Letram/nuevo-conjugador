@using Data
@using ConexionLematizador

@inject IStringLocalizer<CajaReconocimientos> _localizer

<div id="acknowledgements_card" class="uk-card uk-card-default uk-card-body">
    <div class="uk-flex uk-flex-between card-heading">
        <h3 class="uk-card-title">
            @_localizer["titulo"]
        </h3>
        <div>
            <button class="uk-button close-btn rotated"
                    uk-toggle="target: #verb_acknowledgements; animation: uk-animation-fade;"
                    type="button"
                    onclick="toggle()">
                <span uk-icon="icon: chevron-up; ratio: 1.5"></span>
            </button>
        </div>
    </div>
    <div class="card-body">
        <ul id="verb_acknowledgements" class="uk-list uk-list-divider" hidden>
            @if (showImperativeFirst)
            {
                @foreach (int idFlexion in firstToShow.Select(infoCan => infoCan.IdFlexion).Distinct())
                {
                    <li>
                        <p>
                            @((MarkupString)string.Format(_localizer[idFlexion.ToString()], verbUserIsLookingFor, reconocimientoInfo.Verbo))
                            @((MarkupString)string.Format(_localizer["pronombre"], reconocimientoInfo.Reconocimientos.First().Pronombres))
                        </p>
                    </li>
                }
                @if (rest.Count() > 0)
                {
                    <li>
                        <p>En otros casos posibles, pero menos comunes:</p>
                        <ul>
                            @foreach (int idFlexion in rest.Select(infoCan => infoCan.IdFlexion).Distinct())
                            {
                                <li>
                                    <p>
                                        @((MarkupString)string.Format(_localizer[idFlexion.ToString()], verbUserIsLookingFor, reconocimientoInfo.Verbo))
                                        @if (hasPronoun)
                                        {
                                            @((MarkupString)string.Format(_localizer["pronombre"], reconocimientoInfo.Reconocimientos.First().Pronombres))
                                        }
                                    </p>
                                </li>
                            }
                        </ul>
                    </li>
                }
            }
            else
            {
                @foreach (int idFlexion in reconocimientoInfo.Reconocimientos.Select(rec => rec.IdFlexion).Distinct())
                {
                    <li>
                        <p>
                            @((MarkupString)string.Format(_localizer[idFlexion.ToString()], verbUserIsLookingFor, reconocimientoInfo.Verbo))
                            @if (hasPronoun)
                            {
                                @((MarkupString)string.Format(_localizer["pronombre"], reconocimientoInfo.Reconocimientos.First().Pronombres))
                            }
                        </p>
                    </li>
                }
            }
            <li>
                <div class="uk-grid-small uk-text-center uk-child-width-expand@l uk-child-width-expand@m uk-child-width-1-2@s uk-child-width-1-2 verb_categories" uk-grid>
                    <div>
                        <p>Verbo transitivo</p>
                        <i class="fa @(isTransitive ? "fa-check fa-2x green" : "fa-times fa-2x red")"></i>
                    </div>
                    <div>
                        <p>Verbo intransitivo</p>
                        <i class="fa @(isIntransitive ? "fa-check fa-2x green" : "fa-times fa-2x red")"></i>
                    </div>
                    <div>
                        <p>Verbo pronominal</p>
                        <i class="fa @(isPronominal ? "fa-check fa-2x green" : "fa-times fa-2x red")"></i>
                    </div>
                    <div>
                        <p>Aparición en DRAE</p>
                        @if (appearsInRAE)
                        {
                            <a href=@("http://dle.rae.es/?w=" + verbUserIsLookingFor.ToLower()) target="_blank">
                                <i class="fa fa-external-link-square fa-2x orange"></i>
                            </a>
                        }
                        else
                        {
                            <i class="fa-times fa-2x red"></i>
                        }
                    </div>
                </div>
            </li>
        </ul>
    </div>
</div>
@code {
    [Parameter] public ReconocimientoInfoCanonica reconocimientoInfo { get; set; } = new ReconocimientoInfoCanonica();
    [Parameter] public string verbUserIsLookingFor { get; set; }

    private bool isTransitive { get; set; }
    private bool isIntransitive { get; set; }
    private bool isPronominal { get; set; }
    private bool appearsInRAE { get; set; }
    private bool hasPronoun { get; set; }

    private Reconocimiento[] firstToShow { get; set; }
    private Reconocimiento[] rest { get; set; }
    private bool showImperativeFirst { get; set; }
    private int[] imperativeSegment { get; set; } = new int[] { 91, 98 };
}

@functions{
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        isTransitive = reconocimientoInfo.InfoCanonicas.Any(infoCan => infoCan.IdCategoria == 3001 || infoCan.IdCategoriaGN == 3001);
        isPronominal = reconocimientoInfo.InfoCanonicas.Any(infoCan => infoCan.IdCategoria == 3002 || infoCan.IdCategoriaGN == 3002);
        isIntransitive = reconocimientoInfo.InfoCanonicas.Any(infoCan => infoCan.IdCategoria == 3003 || infoCan.IdCategoriaGN == 3003);
        appearsInRAE = reconocimientoInfo.InfoCanonicas.Any(infoCan => infoCan.DRAEXXIII == 1);
        hasPronoun = reconocimientoInfo.Reconocimientos.Any(reco => !reco.Pronombres.Equals(""));
        if (hasPronoun && reconocimientoInfo.Reconocimientos.Any(reco => reco.IdFlexion >= imperativeSegment[0] && reco.IdFlexion <= imperativeSegment[1]))
        {
            //Hay una conjugacion imperativa con pronombre enclítico
            firstToShow = reconocimientoInfo.Reconocimientos
                .Where(reco => reco.IdFlexion >= imperativeSegment[0] && reco.IdFlexion <= imperativeSegment[1])
                .ToArray();
            rest = reconocimientoInfo.Reconocimientos
                .Where(reco => !firstToShow.Contains(reco))
                .ToArray();
            showImperativeFirst = true;
        }
        else
        {
            showImperativeFirst = false;
        }
        base.OnParametersSet();
    }
}
