@using Data

@inject IStringLocalizer<FormasImpersonales> _localizer

@if (formasImpersonales != null)
{
    <div class="uk-child-width-expand@s uk-grid-match" uk-grid>
        <div>
            <div id="impersonal_simple_card" class="uk-card uk-card-default uk-card-body">
                <div class="uk-flex uk-flex-between card-heading">
                    <h3 class="uk-card-title">
                        @_localizer["forma_impersonal"].Value
                    </h3>
                    <div>
                        <button class="uk-button close-btn"
                                uk-toggle="target: #verb_impersonal_simple; animation: uk-animation-fade"
                                type="button"
                                onclick="toggle()">
                            <span uk-icon="icon: chevron-up; ratio: 1.5"></span>

                        </button>
                    </div>
                </div>
                <div class="uk-card-body">
                    <div id="verb_impersonal_simple" class="uk-grid-divider impersonal" uk-grid>
                        <div class="uk-width-small">
                            <ul class="uk-nav uk-nav-default" uk-switcher="connect: #impersonal_simple">
                                <li class="uk-active"><a href="#">@_localizer["infinitivo"].Value</a></li>
                                <li><a href="#">@_localizer["gerundio"].Value</a></li>
                                <li><a href="#">@_localizer["participio"].Value</a></li>
                            </ul>
                        </div>
                        <div class="uk-with-expand">
                            <ul id="impersonal_simple" class="uk-switcher">
                                <li>
                                    @foreach (string infinitivo in formasImpersonales[0])
                                    {
                                        <p>
                                            @(negar ? "no " + infinitivo : infinitivo)
                                        </p>
                                    }
                                </li>
                                <li>
                                    @foreach (string gerundio in formasImpersonales[2])
                                    {
                                        <p>
                                            @(negar ? "no " + gerundio : gerundio)
                                        </p>
                                    }
                                </li>
                                <li>
                                    <div>
                                        <ul class="uk-list">
                                            @{
                                                string participioAux = formasImpersonales[1][0].Substring(0, formasImpersonales[1][0].Length - 1);
                                                string[] generos = new string[] { "o", "a", "os", "as" };
                                                List<string> participiosSinGenero = new List<string>();
                                                foreach (string participio in formasImpersonales[1]) {
                                                    participiosSinGenero.Add(participio.Substring(0, participio.Length - 1));
                                                }
                                                foreach (string genero in generos)
                                                {
                                                    string text = (string.Join(" / ", participiosSinGenero.Select(p => p+genero).ToArray()));
                                                    <li><p>@(negar ? "no " + text : text)</p></li>
                                                }
                                            }
                                        </ul>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div>
            <div id="impersonal_compound_card" class="uk-card uk-card-default uk-card-body">
                <div class="uk-flex uk-flex-between card-heading">
                    <h3 class="uk-card-title">
                        @_localizer["forma_impersonal_comp"].Value
                    </h3>
                    <div>
                        <button class="uk-button close-btn"
                                uk-toggle="target: #verb_impersonal_compound; animation: uk-animation-fade"
                                type="button"
                                onclick="toggle()">
                            <span uk-icon="icon: chevron-up; ratio: 1.5"></span>

                        </button>
                    </div>
                </div>
                <div class="uk-card-body">
                    <div id="verb_impersonal_compound" class="uk-grid-divider impersonal" uk-grid>
                        <div class="uk-width-small">
                            <ul class="uk-nav uk-nav-default" uk-switcher="connect: #impersonal_compound">
                                <li class="uk-active"><a href="#">@_localizer["infinitivo_comp"].Value</a></li>
                                <li><a href="#">@_localizer["gerundio_comp"].Value</a></li>
                            </ul>
                        </div>
                        <div class="uk-with-expand">
                            <ul id="impersonal_compound" class="uk-switcher">
                                <li><p>@(negar ? "no haber " + string.Join(" / ", formasImpersonales[1]) : "haber "+ string.Join(" / ", formasImpersonales[1]))</p></li>
                                <li><p>@(negar ? "no habiendo " + string.Join(" / ", formasImpersonales[1]) : "habiendo "+ string.Join(" / ", formasImpersonales[1]))</p></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@code {
    [Parameter] public string[][] formasImpersonales { get; set; }
    [Parameter] public bool negar { get; set; }
}

@functions {

    protected override void OnInitialized()
    { }
}
