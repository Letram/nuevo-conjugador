@page "/"
@page "/conjugador"
@page "/conjugador/{searchInput}"
@using Services
@using ConexionLematizador
@using System.Globalization
@using Data

@inject IStringLocalizer<Index> _localizer
@inject NavigationManager _navigationManager

<OffCanvas></OffCanvas>
<!-- SEARCH FORM -->
<div id="search_form" class="uk-container">
    <header>
        <h2 class="uk-text-center">@_localizer["escribe_verbo"].Value</h2>
    </header>
    <div class="form-container uk-flex uk-flex-column uk-flex-middle">
        <span class="input-container">
            <input type="text" name="verb" id="form_verb" onkeyup="pressEnterIfNeeded(event)" @bind-value="searchInput" />
        </span>
        <button id="searchBtn" disabled="@IsLoading" type="button" class="uk-button" style="width:40%; margin-top:0.25rem;" @onclick:preventDefault @onclick:stopPropagation @onclick=@(e => OnSearchBtnClicked())>@_localizer["consultar"].Value</button>
    </div>
</div>
<hr>
<hr>
<div class="uk-container" id="data_container">
    <div class="loader @(IsLoading ? "" : "hide")">
        <i class="fa fa-spinner"></i>
    </div>
    <TablaReconocimientos @ref="tablaReconocimientos" searchText="@navigatableSearchInput" onSearchDone="OnSearchDone"></TablaReconocimientos>
    <div class="first-load @(isFirstLoad ? "" : "hide")"></div>
</div>
@code{
    private LematizadorService _lematizador { get; set; }
    [Parameter] public string searchInput { get; set; }
    public string navigatableSearchInput { get; set; }
    public TablaReconocimientos tablaReconocimientos { get; set; }
    private int counter { get; set; }
    private bool IsLoading = false;
    private bool isFirstLoad = true;
    private string es = "es-ES";
    private string en = "en-US";
    private bool wantToSearch { get; set; } = false;
    private string lastSearchInput { get; set; } = "";
}

@functions{
    protected override void OnInitialized()
    {
        _lematizador = new LematizadorService();
        base.OnInitialized();
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (wantToSearch && !lastSearchInput.Equals(searchInput))
        {
            await Search();
        }
        base.OnAfterRender(firstRender);
    }

    protected override Task OnParametersSetAsync()
    {
        if (searchInput != null) wantToSearch = true;
        else wantToSearch = false;
        return base.OnParametersSetAsync();
    }

    private async Task Search()
    {
        if (searchInput != null && !searchInput.Equals(""))
        {
            IsLoading = true;
            isFirstLoad = false;
            StateHasChanged();
            lastSearchInput = searchInput;
            navigatableSearchInput = searchInput;
            await tablaReconocimientos.SearchVerb(searchInput);
        }
    }

    private void SetCulture(string language)
    {
        var uri = new Uri(_navigationManager.Uri)
            .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
        var redirectUri = Uri.EscapeDataString(uri);
        var query = $"?culture={Uri.EscapeDataString(language)}&" +
            $"redirectUri={redirectUri}";

        _navigationManager.NavigateTo("/Culture/SetCulture" + query, forceLoad: true);
    }

    private void OnSearchBtnClicked()
    {
        if (searchInput != null && !searchInput.Equals(""))
            _navigationManager.NavigateTo(_navigationManager.BaseUri + "conjugador/" + searchInput);
    }

    private void OnSearchDone()
    {
        IsLoading = false;
        isFirstLoad = false;
    }
}