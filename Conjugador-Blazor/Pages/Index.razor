@page "/"
@page "/conjugador"
@page "/conjugador/{searchInput}"
@using Services
@using ConexionLematizador
@using System.Globalization
@using Data
@inject AppState state
@inject IStringLocalizer<Index> _localizer

@implements IDisposable
<!-- SEARCH FORM -->
<div id="search_form" class="uk-container">
    <header>
        <h1 class="uk-text-center">@_localizer.WithCulture(state.getCurrentCulture())["escribe_verbo"].Value</h1>
    </header>
    <div class="form-container uk-flex uk-flex-column uk-flex-middle">
        <span class="input-container">
            <input type="text" name="verb" id="form_verb" @bind-value="searchInput" />
        </span>
        <button disabled="@IsLoading" type="button" class="uk-button uk-button-secondary" style="width:40%; margin-top:0.25rem;" @onclick:preventDefault @onclick:stopPropagation @onclick=@(async e => await Search()) >@_localizer.WithCulture(state.getCurrentCulture())["consultar"].Value</button>
    </div>
</div>
<hr>
<hr>
<div class="uk-container" id="data_container">
    @*<button @onclick="e => CambiarIdioma()">Boton para cambiar idioma (experimental)</button>*@
    <div class="loader @(IsLoading ? "" : "hide")">
        <i class="fa fa-spinner"></i>
    </div>
    <TablaReconocimientos @ref="tablaReconocimientos" searchText="@navigatableSearchInput" onSearchDone="OnSearchDone"></TablaReconocimientos>
</div>
@code{
    private LematizadorService _lematizador { get; set; }
    [Parameter] public string searchInput { get; set; }
    public string navigatableSearchInput { get; set; }
    public TablaReconocimientos tablaReconocimientos { get; set; }
    private int counter { get; set; }
    private bool IsLoading = false;
}

@functions{
    protected override void OnInitialized()
    {
        _lematizador = new LematizadorService();

        state.OnChange += OnCultureChange;

        base.OnInitialized();
    }

    public void Dispose()
    {
        state.OnChange -= OnCultureChange;
    }

    protected override Task OnParametersSetAsync()
    {
        if (searchInput != null) Search();
        return base.OnParametersSetAsync();
    }

    private async Task Search()
    {
        if (searchInput != null && !searchInput.Equals(""))
        {
            IsLoading = true;
            navigatableSearchInput = searchInput;
            await tablaReconocimientos.SearchVerb(searchInput);
        }
    }

    private void CambiarIdioma()
    {
        if (state.getCurrentCulture().Equals(new CultureInfo("es")))
        {
            state.ChangeCulture(new CultureInfo("en"));
        }
        else
        {
            state.ChangeCulture(new CultureInfo("es"));
        }
    }

    private void OnCultureChange()
    {
        StateHasChanged();
    }

    private void OnSearchDone()
    {
        IsLoading = false;
    }
}