@page "/"
@page "/conjugador"
@page "/conjugador/{searchInput}"
@using Services
@using ConexionLematizador
@using System.Globalization
@using Data

@inject AppState state
@inject IStringLocalizer<Index> _localizer

@implements IDisposable
<!-- SEARCH FORM -->
<div id="search_form" class="uk-container">
    <header>
        <h1 class="uk-text-center">@_localizer["escribe_verbo"].Value</h1>
    </header>
    <div class="form-container uk-flex uk-flex-column uk-flex-middle">
        <span class="input-container">
            <input type="text" name="verb" id="form_verb" @bind="searchInput" />
        </span>
        <button type="button" class="uk-button uk-button-secondary" style="width:40%; margin-top:0.25rem;" @onclick="Search">@_localizer["consultar"].Value</button>
    </div>
</div>
<hr>
<hr>
<div class="uk-container" id="data_container">
    <button @onclick="e => CambiarIdioma()">Holadenuevo</button>

    <TablaReconocimientos @ref="tablaReconocimientos" searchText="@navigatableSearchInput"></TablaReconocimientos>
</div>
@code{
    private LematizadorService _lematizador { get; set; }
    [Parameter] public string searchInput { get; set; }
    public string navigatableSearchInput { get; set; }
    public TablaReconocimientos tablaReconocimientos { get; set; }
}

@functions{
    protected override void OnInitialized()
    {
        _lematizador = new LematizadorService();

        state.OnChange += OnCultureChange;
    }

    public void Dispose()
    {
        state.OnChange -= OnCultureChange;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (searchInput != null) Search();
    }
    private void Search()
    {
        navigatableSearchInput = searchInput;
        tablaReconocimientos.SearchVerb(searchInput);
    }

    private void CambiarIdioma()
    {
        if (state.getCurrentCulture().Equals(new CultureInfo("es-ES")))
        {
            state.ChangeCulture(new CultureInfo("en-US"));
        }
        else
        {
            state.ChangeCulture(new CultureInfo("es-ES"));
        }
    }

    private void OnCultureChange()
    {
        CultureInfo.CurrentCulture = state.currentCulture;
        CultureInfo.CurrentUICulture = state.currentCulture;

        StateHasChanged();
    }
}