@using Data
@using Services
@using ConexionConjugador

<div uk-grid>
    <div class="uk-width-auto">
        <input class="uk-checkbox" style="opacity: @(HasCheckbox ? "1" : "0" )" type="checkbox" name="@nota.IdNota" @onchange="e => OnCheckboxChange.InvokeAsync(nota.IdNota)" checked="@IsSelected" />
    </div>
    <div class="uk-width-expand">
        @if ((nota.IdNota >= 1000 && nota.IdNota <= 4999) || (nota.IdNota >= 6000 && nota.IdNota <= 7999))
        {
            <span class="note-description @(IsLoading ? "loading" : "")"@onclick="e => GetVerbosConNota(nota.IdNota, nota.Descripcion)" style="cursor:pointer;">@((MarkupString)(nota.Descripcion))</span>
        }
        else
        {
            <span>@((MarkupString)(nota.Descripcion))</span>
        }
    </div>
</div>
<TablaResultados listOfResults="verbosConNota" titleOfNote="@nota.Descripcion"></TablaResultados>

@code {
    [Parameter] public bool IsSelected { get; set; }
    [Parameter] public bool HasCheckbox { get; set; }
    [Parameter] public Nota nota { get; set; }
    [Parameter] public ConjugadorService conjugador { get; set; }
    [Parameter] public EventCallback<int> OnCheckboxChange { get; set; }

    private bool IsLoading { get; set; } = false;
    private List<string> verbosConNota { get; set; }
}

@functions{
    protected override void OnInitialized()
    {
        verbosConNota = new List<string>();
    }

    private async void GetVerbosConNota(int idNota, string tituloNota)
    {
        IsLoading = true;
        if (verbosConNota.Count > 0)
        {
            verbosConNota.Clear();
        }
        else
        {
        List<string> res = await conjugador.GetVerbosConNotaAsync(idNota);
            verbosConNota = res;
        }
        IsLoading = false;
        StateHasChanged();
    }
}
