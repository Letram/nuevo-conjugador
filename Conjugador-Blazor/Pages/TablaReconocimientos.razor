@page "/TableReconocimientos"
@page "/TableReconocimientos/{verb}"

@using Services
@using ConexionConjugador
@using ConexionCorrector
@using ConexionLematizador
@using Data
@using Microsoft.AspNetCore.Html;

@if (reconocimientos.Count > 0)
{
    <header id="verb_name">
        <h1 class="uk-text-center">Conjugación del verbo <b>@reconocimientos[_selectedIndex].FormaCanonica</b></h1>
    </header>
    <hr />
    <div id="results" class="uk-child-width-expand uk-grid-column-medium" uk-grid>
        @foreach (Reconocimiento reconocimiento in reconocimientos)
        {
            int index = reconocimientos.IndexOf(reconocimiento);
            <div id="@index" class="uk-card uk-card-small uk-card-default @((_selectedIndex == index) ? "selected" : "")"
                 @onclick="e => GetDataFromSelectedIndex(index)">
                <p class="uk-text-center">@searchText - (verbo @reconocimiento.FormaCanonica)</p>
            </div>
        }
    </div>
    <table class="uk-table">
        <thead>
            <tr>
                @foreach (string header in reconocimientoHeaders)
                {
                    <th>@header</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (Reconocimiento reconocimiento in reconocimientos)
            {
                <tr>
                    <td>@reconocimiento.FormaCanonica.</td>
                    <td>@reconocimiento.Frecuencia</td>
                    <td>@reconocimiento.IdFlexion</td>
                    <td>@reconocimiento.IdFormaCanonica</td>
                    <td>@reconocimiento.Prefijos</td>
                    <td>@reconocimiento.Pronombres</td>
                </tr>
            }
        </tbody>
    </table>
    <hr />
    <table class="uk-table">
        <thead>
            <tr>
                @foreach (string header in canonicaHeaders)
                {
                    <th>@header</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@info.Antigua</td>
                <td>@info.DRAEXXIII</td>
                <td>@info.FormaCanonica</td>
                <td>@info.Frecuencia</td>
                <td>@info.IdCategoria</td>
                <td>@info.IdCategoriaGN</td>
                <td>@info.IdFlexion</td>
                <td>@info.MaxAcepciones</td>
                <td>@info.MaxEtimologia</td>
                <td>@info.NumAcepcion</td>
                <td>@info.NumAcepcionSec</td>
                <td>@info.NumEtimologia</td>
                <td>@info.PosAcepcion</td>
                <td>@info.PosAcepcionSec</td>
            </tr>
        </tbody>
    </table>
    <div class="uk-margin uk-card uk-card-default uk-card-body notes">
        <div class="uk-flex uk-flex-between card-heading">
            <h3 class="uk-card-title">
                Notas
            </h3>
            <div>
                <button class="uk-button uk-button-text close-btn"
                        uk-toggle="target: #notes; animation: uk-animation-fade"
                        type="button"
                        onclick="toggle()">
                    Less
                </button>
            </div>
        </div>
        <div id="notes">
            @foreach (Nota nota in notas)
            {
                @*Hay que evitar poner las notas que se corresponden con los ejemplos o con cosas que no queremos tener en cuenta(id = grupos 0,1,2,7,9)*@
                if (nota.IdNota >= 3001 && nota.IdNota <= 6203)
                {
                    int notaIndex = notas.IndexOf(nota);
                    <label>
                        <input class="uk-checkbox" type="checkbox" name="@nota.IdNota" @onchange="e => ManageListOfNotes(notaIndex)" /> <span>@((MarkupString)(nota.Descripcion))</span>
                    </label>
                }
            }
        </div>
    </div>
    <TablaModos indicativo="modoIndicativo" subjuntivo="modoSubjuntivo" imperativo="modoImperativo" formasImpersonales="formasImpersonales" notasSeleccionadas="selectedNotas"></TablaModos>
    <Conjugaciones conjugaciones="conjugaciones"></Conjugaciones>
}
else
{
    <header>
        <h1 class="uk-text-center">Introduzca en el servicio un verbo válido.</h1>
    </header>
}

@code{
    [Parameter] public string searchText { get; set; }

    private LematizadorService _lematizador { get; set; }
    private ConjugadorService _conjugador { get; set; }
    private List<Reconocimiento> reconocimientos { get; set; }
    private List<InfoConjugacion> conjugaciones { get; set; }
    private InfoCanonica info { get; set; }

    private List<Nota> notas { get; set; }
    private List<int> selectedNotas { get; set; }

    private string[] formasImpersonales { get; set; }

    private ModoVerbo modoIndicativo { get; set; }
    private ModoVerbo modoImperativo { get; set; }
    private ModoVerbo modoSubjuntivo { get; set; }

    private int _selectedIndex { get; set; }
    public string[] reconocimientoHeaders =
    {
            "Forma canónica",
            "Frecuencia",
            "Código de flexión",
            "Código de forma canónica",
            "Prefijos",
            "Pronombres"
        };

    public string[] canonicaHeaders =
    {
            "AntiguaField",
            "DRAEXXIIIField",
            "FormaCanonicaField",
            "FrecuenciaField",
            "IdCategoriaField",
            "IdCategoriaGNField",
            "IdFlexionField",
            "MaxAcepcionesField",
            "MaxEtimologiaField",
            "NumAcepcionField",
            "NumAcepcionSecField",
            "NumEtimologiaField",
            "PosAcepcionField",
            "PosAcepcionSecField"
        };


}
@functions{

        protected override void OnInitialized()
        {
            reconocimientos = new List<Reconocimiento>();
            info = new InfoCanonica();
            _lematizador = new LematizadorService();
            _conjugador = new ConjugadorService();
            _selectedIndex = 0;
            selectedNotas = new List<int>();
        }

        public async void SearchVerb(string verb)
        {
            if (verb == "") return;
            searchText = verb;
            reconocimientos = await _lematizador.GetReconocimientosAsync(verb);
            _selectedIndex = 0;
            if (reconocimientos.Count > 0)
            {
                GetDataFromSelectedIndex(_selectedIndex);
            }
            else StateHasChanged();
        }

        public async void GetDataFromSelectedIndex(int index)
        {
            _selectedIndex = index;

            //La manera de hacerlo todo en paralelo para reducir tiempos de espera fue sacada del siguiente enlace
            //https://stackoverflow.com/questions/17197699/awaiting-multiple-tasks-with-different-results
            Task<List<InfoConjugacion>> taskConjugaciones = _conjugador.GetInfoConjugacion(reconocimientos[_selectedIndex].IdFormaCanonica);
            Task<InfoCanonica> taskCanonica = _lematizador.GetInfoCanonicaAsync(reconocimientos[_selectedIndex].IdFormaCanonica);
            Task<List<string>> taskDefiniciones = _conjugador.GetDefinicionesAsync(reconocimientos[_selectedIndex].IdFormaCanonica);

            await Task.WhenAll(taskConjugaciones, taskCanonica, taskDefiniciones);

            conjugaciones = await taskConjugaciones;
            info = await taskCanonica;
            List<string> definiciones = await taskDefiniciones;
            //---

            if (conjugaciones != null)
            {
                formasImpersonales = new String[3];
                formasImpersonales[0] = conjugaciones[0].Forma; //inf
                formasImpersonales[1] = conjugaciones[1].Forma; //par
                formasImpersonales[2] = conjugaciones[2].Forma; //ger
                modoIndicativo = FormatearConjugaciones(conjugaciones.Where(conjugacion => conjugacion.IdFlexion >= 10 && conjugacion.IdFlexion <= 57).ToList(), "Indicativo");
                modoSubjuntivo = FormatearConjugaciones(conjugaciones.Where(conjugacion => conjugacion.IdFlexion >= 60 && conjugacion.IdFlexion <= 87).ToList(), "Subjuntivo");
                modoImperativo = FormatearConjugaciones(conjugaciones.Where(conjugacion => conjugacion.IdFlexion >= 91 && conjugacion.IdFlexion <= 98).ToList(), "Imperativo");
                InfoConjugacion infinitivo = conjugaciones.Where(conjugacion => conjugacion.IdFlexion == 1).First();

                notas = infinitivo.Notas;
            }

            StateHasChanged();
        }

        private ModoVerbo FormatearConjugaciones(List<InfoConjugacion> conjugacionesDelModo, string modo = "imperativo")
        {
            List<ConjugacionVerbo> listaConjugaciones = new List<ConjugacionVerbo>();
            switch (modo)
            {
                case "Indicativo":
                    //Presente
                    listaConjugaciones.Add(
                        GetConjugacionFromInfoConjugacion(
                            new string[] { "Presente", "Presente" },
                            conjugacionesDelModo.Where(conjugacion => conjugacion.IdFlexion >= 10 && conjugacion.IdFlexion <= 18).ToList(),
                            new int[] { 10, 15 },
                            new int[] { 16, 17 },
                            18
                        )
                    );
                    //Preterito imperfecto o copreterito
                    listaConjugaciones.Add(
                        GetConjugacionFromInfoConjugacion(
                            new string[] { "Pretérito imperfecto", "Copretérito" },
                            conjugacionesDelModo.Where(conjugacion => conjugacion.IdFlexion >= 20 && conjugacion.IdFlexion <= 27).ToList(),
                            new int[] { 20, 25 },
                            new int[] { 26, 27 }
                        )
                    );
                    //Pretérito perfecto simple o pretérito
                    listaConjugaciones.Add(
                        GetConjugacionFromInfoConjugacion(
                            new string[] { "Pretérito perfecto simple", "Pretérito" },
                            conjugacionesDelModo.Where(conjugacion => conjugacion.IdFlexion >= 30 && conjugacion.IdFlexion <= 37).ToList(),
                            new int[] { 30, 35 },
                            new int[] { 36, 37 }
                        )
                    );
                    //Futuro simple
                    listaConjugaciones.Add(
                        GetConjugacionFromInfoConjugacion(
                            new string[] { "Futuro simple", "Futuro" },
                            conjugacionesDelModo.Where(conjugacion => conjugacion.IdFlexion >= 40 && conjugacion.IdFlexion <= 47).ToList(),
                            new int[] { 40, 45 },
                            new int[] { 46, 47 }
                        )
                    );
                    //Condicional simple
                    listaConjugaciones.Add(
                        GetConjugacionFromInfoConjugacion(
                            new string[] { "Condicional simple", "Pospretérito" },
                            conjugacionesDelModo.Where(conjugacion => conjugacion.IdFlexion >= 50 && conjugacion.IdFlexion <= 57).ToList(),
                            new int[] { 50, 55 },
                            new int[] { 56, 57 }
                        )
                    );
                    break;
                case "Subjuntivo":
                    //Presente subjuntivo
                    listaConjugaciones.Add(
                        GetConjugacionFromInfoConjugacion(
                            new string[] { "Presente", "Presente" },
                            conjugacionesDelModo.Where(conjugacion => conjugacion.IdFlexion >= 60 && conjugacion.IdFlexion <= 67).ToList(),
                            new int[] { 60, 65 },
                            new int[] { 66, 67 }
                        )
                    );
                    //Pretérito imperfecto subjuntivo
                    listaConjugaciones.Add(
                        GetConjugacionFromInfoConjugacion(
                            new string[] { "Pretérito imperfecto", "Pretérito" },
                            conjugacionesDelModo.Where(conjugacion => conjugacion.IdFlexion >= 70 && conjugacion.IdFlexion <= 77).ToList(),
                            new int[] { 70, 75 },
                            new int[] { 76, 77 }
                        )
                    );
                    //Futuro subjuntivo
                    listaConjugaciones.Add(
                        GetConjugacionFromInfoConjugacion(
                            new string[] { "Futuro simple", "Futuro" },
                            conjugacionesDelModo.Where(conjugacion => conjugacion.IdFlexion >= 80 && conjugacion.IdFlexion <= 87).ToList(),
                            new int[] { 80, 85 },
                            new int[] { 86, 87 }
                        )
                    );
                    break;
                default:
                    //Imperativo
                    listaConjugaciones.Add(
                        GetConjugacionFromInfoConjugacion(
                            new string[] { "Imperativo", "Imperativo" },
                            conjugacionesDelModo.Where(conjugacion => conjugacion.IdFlexion >= 91 && conjugacion.IdFlexion <= 98).ToList(),
                            new int[] { 91, 96 },
                            new int[] { 96, 97 },
                            98,
                            true
                        )
                    );
                    break;
            }

            ModoVerbo result = new ModoVerbo(modo, listaConjugaciones);
            return result;
        }

        private ConjugacionVerbo GetConjugacionFromInfoConjugacion
            (
                string[] nombreConjugacion,
                List<InfoConjugacion> infoConjugaciones,
                int[] espIndex,
                int[] canIndex,
                int indexVos = -1,
                bool incompleto = false
            )
        {
            ConjugacionVerbo conjugacion = new ConjugacionVerbo();

            conjugacion.nombreConjugacion = nombreConjugacion;
            infoConjugaciones.Sort((info1, info2) => info1.IdFlexion.CompareTo(info2.IdFlexion));
            if (incompleto)
            {
                conjugacion.conjEsp = new List<InfoConjugacion>();
                conjugacion.conjEsp.Add(new InfoConjugacion());
                conjugacion.conjEsp.Add(infoConjugaciones[0]);
                conjugacion.conjEsp.Add(new InfoConjugacion());
                conjugacion.conjEsp.Add(infoConjugaciones[1]);
                conjugacion.conjEsp.Add(infoConjugaciones[2]);
                conjugacion.conjEsp.Add(new InfoConjugacion());
            }
            else
            {
                conjugacion.conjEsp = infoConjugaciones.Where(infoConjugacion => infoConjugacion.IdFlexion >= espIndex[0] && infoConjugacion.IdFlexion <= espIndex[1]).ToList();
            }
            conjugacion.conjCan = infoConjugaciones.Where(infoConjugacion => infoConjugacion.IdFlexion >= canIndex[0] && infoConjugacion.IdFlexion <= canIndex[1]).ToList();
            conjugacion.conjFor = infoConjugaciones.Where(infoConjugacion => infoConjugacion.IdFlexion >= canIndex[0] && infoConjugacion.IdFlexion <= canIndex[1]).ToList();
            conjugacion.conjVos = infoConjugaciones.Where(infoConjugacion => infoConjugacion.IdFlexion == indexVos).ToList();

            return conjugacion;
        }

        //private ConjugacionVerbo GetConjugacionFromInfoConjugacion_2
        //        (
        //            string[] nombreConjugacion,
        //            List<InfoConjugacion> infoConjugaciones,
        //            int[] espIndex,
        //            int[] canIndex,
        //            int indexVos = -1,
        //            bool incompleto = false
        //        )
        //{
        //    ConjugacionVerbo conjugacion = new ConjugacionVerbo();

        //    conjugacion.nombreConjugacion = nombreConjugacion;
        //    infoConjugaciones.Sort((info1, info2) => info1.IdFlexion.CompareTo(info2.IdFlexion));

        //    conjugacion.conjEsp = infoConjugaciones.Where(infoConjugacion => infoConjugacion.IdFlexion >= espIndex[0] && infoConjugacion.IdFlexion <= espIndex[1]).ToList();
        //    conjugacion.conjCan = infoConjugaciones.Where(infoConjugacion => infoConjugacion.IdFlexion >= espIndex[0] && infoConjugacion.IdFlexion <= espIndex[1]).ToList();
        //    conjugacion.conjFor = infoConjugaciones.Where(infoConjugacion => infoConjugacion.IdFlexion >= espIndex[0] && infoConjugacion.IdFlexion <= espIndex[1]).ToList();
        //    conjugacion.conjVos = infoConjugaciones.Where(infoConjugacion => infoConjugacion.IdFlexion >= espIndex[0] && infoConjugacion.IdFlexion <= espIndex[1]).ToList();

        //    if (indexVos != -1)
        //    {
        //        conjugacion.conjVos[1] = infoConjugaciones.First(info => info.IdFlexion == indexVos);
        //    }
        //    conjugacion.conjVos[4] = infoConjugaciones.First(info => info.IdFlexion == espIndex[1]);


        //    return conjugacion;
        //}
        private void ManageListOfNotes(int indexOfNotes)
        {
            int idNota = notas[indexOfNotes].IdNota;
            if (selectedNotas.Contains(idNota))
            {
                selectedNotas.Remove(idNota);
            }
            else
            {
                selectedNotas.Add(idNota);
            }
        }
}