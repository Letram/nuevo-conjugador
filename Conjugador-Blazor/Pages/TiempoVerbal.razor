@using Data
@using ConexionConjugador

@inject IStringLocalizer<TiempoVerbal> _localizer

<div class="tense-container @(lenguajeConjugacion[0].Count > 1 ? "uk-width-2-3@m uk-width-1-2@s" : "uk-width-1-3@m uk-width-1-2@s")">
    <div class="uk-card uk-card-default uk-card-body">
        <div class="verb_tense">
            <div class="uk-card-badge uk-label @badgeClass[modo] custom-badge">@modos[modo]</div>
            <h3 class="uk-card-title">
                @_localizer[nombreConjugacion[0]]
            </h3>
            <p class="uk-text-meta uk-margin-remove-top additional_info">@_localizer[nombreConjugacion[1]]</p>
            <hr>
            @if (lenguajeConjugacion[0].Count > 1)
            {
                <div class="tense uk-grid-divider uk-child-width-expand" uk-grid>
                    <div>
                        @{
                            int sujetosIndex = 0;
                            @foreach (List<InfoConjugacion> lista in lenguajeConjugacion)
                            {
                                if (lista.Count > 0)
                                {
                                    <p class="@(lista[0].IdNotas != null ? (notasSeleccionadas.Any(nota => lista[0].IdNotas.Contains(nota)) ? "hasNote" : "") : "" )">
                                        @(modo == 1 ? "... que " : "")
                                        <span data-subjunctive="@(modo == 1 ? true : false)">@sujetos[sujetosIndex]</span>
                                        @(opciones[0] ?
                                            (MarkupString)("<span> no </span>") :
                                            (MarkupString)(""))
                                        @(opciones[2] ?
                                            (MarkupString)(" <span>" + pronombres[sujetosIndex] + "</span>") :
                                            (MarkupString)(""))
                                        @lista[0].Forma
                                        @(opciones[3] ?
                                            (MarkupString)(" - <span>" + lista[0].FrecCREA + "</span>") :
                                            (MarkupString)(""))
                                    </p>
                                }
                                else
                                {
                                    <p>-</p>
                                }
                                sujetosIndex += 1;
                            }
                        }
                    </div>
                    <div>
                        @{
                            sujetosIndex = 0;
                            @foreach (List<InfoConjugacion> lista in lenguajeConjugacion)
                            {
                                if (lista.Count > 0)
                                {
                                    <p class="@(lista[1].IdNotas != null ? (notasSeleccionadas.Any(nota => lista[1].IdNotas.Contains(nota)) ? "hasNote" : "") : "" )">
                                        @(modo == 1 ? "... que " : "")
                                        <span data-subjunctive="@(modo == 1 ? true : false)">@sujetos[sujetosIndex]</span>
                                        @(opciones[0] ?
                                            (MarkupString)("<span> no </span>") :
                                            (MarkupString)(""))
                                        @(opciones[2] ?
                                            (MarkupString)(" <span>" + pronombres[sujetosIndex] + "</span>") :
                                            (MarkupString)(""))
                                        @lista[1].Forma
                                        @(opciones[3] ?
                                            (MarkupString)(" - <span>" + lista[0].FrecCREA + "</span>") :
                                            (MarkupString)(""))
                                    </p>
                                }
                                else
                                {
                                    <p>-</p>
                                }
                                sujetosIndex += 1;
                            }
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="tense">
                    @{
                        int sujetosIndex = 0;
                        @foreach (List<InfoConjugacion> lista in lenguajeConjugacion)
                        {
                            if (lista.Count > 0)
                            {
                                if (modo == 2)
                                {
                                    <p class="@(lista[0].IdNotas != null ? (notasSeleccionadas.Any(nota => lista[0].IdNotas.Contains(nota)) ? "hasNote" : "") : "" )">
                                        @(opciones[0] ?
                                            (MarkupString)("<span> no </span>") :
                                            (MarkupString)(""))
                                        @(opciones[2] ?
                                            (MarkupString)(" <span>" + pronombres[sujetosIndex] + "</span>") :
                                            (MarkupString)(""))
                                        @lista[0].Forma
                                        <span data-imperative>@sujetos[sujetosIndex]</span>
                                    </p>
                                }
                                else
                                {
                                    <p class="@(lista[0].IdNotas != null ? (notasSeleccionadas.Any(nota => lista[0].IdNotas.Contains(nota)) ? "hasNote" : "") : "" )">
                                        @(modo == 1 ? "... que " : "")
                                        <span data-subjunctive="@(modo == 1 ? true : false)">@sujetos[sujetosIndex]</span>
                                        @(opciones[0] ?
                                            (MarkupString)("<span> no </span>") :
                                            (MarkupString)(""))
                                        @(opciones[2] ?
                                            (MarkupString)(" <span>" + pronombres[sujetosIndex] + "</span>") :
                                            (MarkupString)(""))
                                        @lista[0].Forma
                                        @(opciones[3] ?
                                            (MarkupString)(" - <span>" + lista[0].FrecCREA + "</span>") :
                                            (MarkupString)(""))
                                    </p>
                                }
                            }
                            else
                            {
                                <p>-</p>
                            }
                            sujetosIndex += 1;
                        }
                    }
                </div>
            }
        </div>
    </div>
</div>

@code{
    [Parameter] public string[] sujetos { get; set; }
    [Parameter] public string[] pronombres { get; set; }
    [Parameter] public int modo { get; set; } //1 => indicativo, 2 => subjuntivo, 3 => imperativo
    [Parameter] public string[] nombreConjugacion { get; set; }
    [Parameter] public List<List<InfoConjugacion>> lenguajeConjugacion { get; set; }
    [Parameter] public bool[] opciones { get; set; }
    [Parameter] public List<int> notasSeleccionadas { get; set; }
    private string[] modos = { "Indicativo", "Subjuntivo", "Imperativo" };
    private string[] badgeClass = { "uk-label-success", "uk-label-primary", "uk-label-danger" };
}
@functions{
}